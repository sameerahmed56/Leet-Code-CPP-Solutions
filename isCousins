class Solution {
public:
    int findDepth(TreeNode* root, int z,int depth){
        if(root==nullptr)
            return -1;
        if(root-> val == z){
            return depth;
        }
        return max(findDepth(root->left, z, depth+1),findDepth(root->right, z, depth+1));
    }
    bool hasSameParent(TreeNode* root, int mainDepth,int x, int y, int depth){
        if(root == nullptr || depth >= mainDepth){
            return false;
        }
        if(mainDepth==depth+1){
            if(root->left!=nullptr){
                if(root->left->val==x){
                    if(root->right!=nullptr && root->right->val==y){
                        return true;
                    }
                }
            }
            if(root->right!=nullptr){
                if(root->right->val==x){
                    if(root->left!=nullptr && root->left->val==y){
                        return true;
                    }
                }
            }
        }
        return hasSameParent(root->left,mainDepth,x,y,depth+1) || hasSameParent(root->right,mainDepth,x,y,depth+1);
    }
    bool isCousins(TreeNode* root, int x, int y) {
        if(root==nullptr)
            return false;
        int xDepth = findDepth(root, x, 0);
        int yDepth = findDepth(root, y, 0);
        if(xDepth == yDepth){
            return !hasSameParent(root,xDepth,x,y,0);
        }
        return false;
    }
};

// WAY MOOOOOOORE BETTER APPROACH
class Solution {
public:
    int xLevel,yLevel,xParent,yParent;
    void calc(TreeNode* root, int& x, int& y,int level,int parent){
        
        if(root == NULL) return;
        
        if(root->val == x){
            xParent =parent;
            xLevel= level;
        }
        if(root->val == y){
            yParent =parent;
            yLevel= level;
        }
        
        calc(root->left,x,y,level+1, root->val);
        calc(root->right,x,y,level+1, root->val);
        
    }
    bool isCousins(TreeNode* root, int x, int y) {
        
        calc(root,x,y,0,0);
        
        if(xLevel == yLevel  and xParent != yParent) return true;
        
        return false;
        
    }
};
