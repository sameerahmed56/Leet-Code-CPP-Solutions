class Solution {
public:
    int maxWidthOfVerticalArea(vector<vector<int>>& points) {
        vector <long int> ans;
        int maxSize = 0;
        for(int i = 0;i < points.size(); i++){
            ans.push_back(points[i][0]);
        }
        sort(ans.begin(), ans.end());
        for(int i = 0;i < ans.size() - 1; i++){
            int dif = ans[i +1] - ans[i];
            maxSize = std::max(maxSize, dif);
        }
        return maxSize;
    }
};
// with set
class Solution {
public:
    int maxWidthOfVerticalArea(vector<vector<int>>& points) {
        set<int> x;
        int res = 0;
        for (auto &p : points)
            x.insert(p[0]);
        for (auto it = next(begin(x)); it != end(x); ++it)
            res = max(res, *it - *prev(it));
        return res;
    }
};
