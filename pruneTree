class Solution {
public:
    void traverse(TreeNode* root){
        if(root == nullptr) return;
        if(!hasOne(root->left)){
            root->left = nullptr;
        }
        if(!hasOne(root->right)){
            root->right = nullptr;
        }
        traverse(root->left);
        traverse(root->right);
    }
    bool hasOne(TreeNode* root){
        if(root == nullptr) return false;
        if(root->val == 1) return true;
        return hasOne(root->left) || hasOne(root->right); 
    }
    TreeNode* pruneTree(TreeNode* root) {
        traverse(root);
        if(root-> val == 0 && root->left == nullptr && root->right == nullptr) return nullptr;
        return root;
    }
};
