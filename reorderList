/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        if(head -> next == nullptr)
            return;
        
        ListNode *fast = head, *slow = head;
        stack <ListNode*> st;
        while(fast && fast -> next ){
            slow = slow -> next;
            fast = fast -> next -> next;
        }
        while(slow != nullptr){
            st.push(slow);
            slow = slow -> next;
        }
        while(!st.empty()){
            fast = head -> next;
            head -> next = st.top();
            st.pop();
            head -> next -> next = fast;
            head = head -> next -> next;
        }
        head -> next = nullptr;
    } 
};
