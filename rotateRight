/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head == nullptr){
            return head;
        }
        ListNode* fast = head;
        ListNode* slow = head;
        int size = 0;
        while(fast != nullptr){
            fast = fast->next;
            size++;
        }
        k = k%size;
        if(k==0){
            return head;
        }
        fast=head;
        for(int i=0; i<k;i++){
            fast = fast->next;
        }
        while(fast->next != nullptr){
            fast=fast->next;
            slow=slow->next;
        }
        ListNode* newHead = slow->next;
        fast = newHead;
        slow->next = nullptr;
        while(fast!=nullptr){
            slow=fast;
            fast=fast->next;
        }
        slow ->next = head;
        return newHead;
    }
};
